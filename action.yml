name: "🚀 Release Umbraco Package"
description: ""
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  artifact-name:
    description: "Artifact name"
    required: true
  version:
    description: "Version"
    required: true
  nuget-api-key:
    description: "NuGet API key"
    required: false
  github-token:
    description: "GitHub token"
    required: true
  nuget-source:
    description: "NuGet source"
    default: "https://api.nuget.org/v3/index.json"
    required: false
  nuget-skip-push:
    description: "Skip NuGet push"
    default: "false"
    required: false
  ignore-files:
    description: "Skip release if only these files are changed"
    default: "SECURITY.md,.github/README.md,docs/README_nuget.md,.github/workflows/release.yml,.github/workflows/auto-assign.yml,.github/workflows/build.yml,.github/workflows/create-pr.yml,.github/workflows/sync-branches.yml,.github/workflows/update-releases.yml,docs/"
    required: false
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Check for changes
      id: check-changes
      shell: pwsh
      run: |
        $IGNORE_FILES="${{ inputs.ignore-files }}"
        $currentBranch = git symbolic-ref --short HEAD 2>&1
        $tags = git for-each-ref --sort=creatordate --format '%(refname:short)' refs/tags
        $mergedTags = git tag --merged $currentBranch --sort=creatordate

        Write-Host "Current branch: $currentBranch"
        $allowPrelease = $currentBranch -like "*/dev"
        Write-Host "Tags on current branch: $mergedTags"
        # iterate in reverse order to find the last tag
        $lastTag = $null
        for($i = $mergedTags.Count - 1; $i -ge 0; $i--) {
            $tag = $mergedTags[$i]
            # check if tag is a pre-release tag
            if ($tag -like "*-*" -and !$allowPrelease) {
                Write-Host "Skipping pre-release tag: $tag"
                continue
            }
            $lastTag = $tag
            Write-Host "Last release tag found: $lastTag"
            break
        }

        if (-not $lastTag) {
            Write-Host "No release tags found on current branch, skipping release."
            exit 1
        }

        # List all changed files since the last release tag
        $changedFiles = git diff --name-only "$lastTag...$currentBranch"
        Write-Host "Changed files since last tag:`n`n$changedFiles`n`n"
        # Initialize flag
        $ignoreRelease = $true

        if (-not $changedFiles) {
            Write-Host "No changed files found since last tag, skipping release."
            exit 1
        }

        # Iterate through changed files
        foreach ($file in $changedFiles.Split()) {
            # Split and trim ignore patterns
            $ignorePatterns = @($IGNORE_FILES.Split(',').Trim())
            
            # Check if file matches any ignore pattern
            $ignoreFiles = $false
            foreach ($pattern in $ignorePatterns) {
                if ($file -like $pattern) {
                    Write-Host "Ignoring file: $file (matches pattern: $pattern)"
                    $ignoreFiles = $true
                    break                
                }
            }
            if ($ignoreFiles) {
                Write-Host "File $file is ignored, continuing to next file."
                continue
            }
            
            # If we get here, file doesn't match any ignore patterns
            Write-Host "Relevant change found: $file"
            $ignoreRelease = $false
            break
        }

        Write-Host "SKIP=$ignoreRelease"
        "SKIP=$ignoreRelease" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Remove all labels from PR
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.number }}
        PR_TITLE: "${{ inputs.version }}"
      run: |
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR number found, skipping label removal."
          exit 0
        fi

        args=("edit" "--title" "$PR_TITLE" "$PR_NUMBER")

        mapfile -t labels < <(gh pr view "$PR_NUMBER" --json labels | jq -r '.labels[].name')

        for label in "${labels[@]}"; do
          args+=("--remove-label" "$label")
        done

        gh pr "${args[@]}"
    - name: Update PR if release is skipped
      if: ${{ (env.SKIP == 'true') && (github.event_name == 'pull_request') && (github.event.action == 'closed') }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.number }}
        PR_TITLE: "${{ inputs.version }} (release skipped)"
      run: |
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR number found, skipping title update."
          exit 0
        fi

        gh pr edit $PR_NUMBER --title "$PR_TITLE" --add-label "⚠️ skipped"
    - name: Update PR if release is not skipped
      if: ${{ (env.SKIP == 'false') && (github.event_name == 'pull_request') && (github.event.action == 'closed') }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.number }}
        PR_TITLE: "${{ inputs.version }} (released)"
      run: |
        if [ -z "$PR_NUMBER" ]; then
          echo "No PR number found, skipping title update."
          exit 0
        fi

        gh pr edit $PR_NUMBER --title "$PR_TITLE" --add-label "✅ released"
    - name: Set env
      if: ${{ env.SKIP == 'false' }}
      id: set-env
      shell: bash
      run: |
        echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${{ inputs.artifact-name }}" >> $GITHUB_ENV
        echo "NUGET_API_KEY=${{ inputs.nuget-api-key }}" >> $GITHUB_ENV
        echo "ARTIFACT_PATH=./packages" >> $GITHUB_ENV
        echo "NUGET_SOURCE=${{ inputs.nuget-source }}" >> $GITHUB_ENV
    - name: Download package
      if: ${{ env.SKIP == 'false' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_PATH }}
    - name: Push to NuGet
      if: ${{ (inputs.nuget-skip-push != 'true') && (env.SKIP == 'false') }}
      shell: bash
      run: |
        dotnet nuget push ${{ env.ARTIFACT_PATH }}/**/*.nupkg -k ${{ env.NUGET_API_KEY }} -s ${{ env.NUGET_SOURCE }} --skip-duplicate
    - name: 🚀 Create release
      if: ${{ env.SKIP == 'false' }}
      uses: jcdcdev/jcdcdev.GitHub.CreateRelease@main
      with:
        version: ${{ env.VERSION }}
        github-token: ${{ inputs.github-token }}
