name: "ðŸš€ Release Umbraco Package"
description: ""
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  artifact-name:
    description: "Artifact name"
    required: true
  version:
    description: "Version"
    required: true
  nuget-api-key:
    description: "NuGet API key"
    required: false
  github-token:
    description: "GitHub token"
    required: true
  nuget-source:
    description: "NuGet source"
    default: "https://api.nuget.org/v3/index.json"
    required: false
  nuget-skip-push:
    description: "Skip NuGet push"
    default: "false"
    required: false
  ignore-files:
    description: "Skip release if only these files are changed"
    default: "SECURITY.md,.github/README.md"
    required: false
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Check for changes
      id: check-changes
      shell: pwsh
      run: |
        # find the last release tag on the current branch
        $LAST_RELEASE_TAG= git describe --tags --abbrev=0 || echo ""
        # list all changed files since the last release tag
        $CHANGED_FILES= git diff --name-only "$LAST_RELEASE_TAG...HEAD"
        $IGNORE_RELEASE=$true
        # iterate each changed file
        for $FILE in $CHANGED_FILES; do
          if (${{ inputs.ignore-files }} -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $FILE -like "$_" }) {
            continue
          }

          IGNORE_RELEASE=$false
          break
        done
        
        if ($IGNORE_RELEASE) {
          Write-Host "No relevant changes found, skipping release."
          exit 1
        }
    - name: Set env
      id: set-env
      shell: bash
      run: |
        echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=${{ inputs.artifact-name }}" >> $GITHUB_ENV
        echo "NUGET_API_KEY=${{ inputs.nuget-api-key }}" >> $GITHUB_ENV
        echo "ARTIFACT_PATH=./packages" >> $GITHUB_ENV
        echo "NUGET_SOURCE=${{ inputs.nuget-source }}" >> $GITHUB_ENV
    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_PATH }}
    - name: Push to NuGet
      if: ${{ inputs.nuget-skip-push != 'true' }}
      shell: bash
      run: |
        dotnet nuget push ${{ env.ARTIFACT_PATH }}/**/*.nupkg -k ${{ env.NUGET_API_KEY }} -s ${{ env.NUGET_SOURCE }} --skip-duplicate
    - name: ðŸš€ Create release
      uses: jcdcdev/jcdcdev.GitHub.CreateRelease@main
      with:
        version: ${{ env.VERSION }}
        github-token: ${{ inputs.github-token }}
